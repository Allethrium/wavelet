# This file aims to provide a usable base CoreOS image
# It will can run as a subordinate device.
# It should have all the necessary files to promote itself to an encoder
# Or even a server with the appropriate scripts.
# It assumes it will start as a decoder.
# Running this installation WITHOUT a Wavelet server on the network will fail.
# ignition:
# version: 3.0.0
---
variant: fcos
version: 1.5.0
kernel_arguments:
  should_exist:
    - preempt=full
    - nosmt
    - threadirqs
    - mitigations=off
    - cpufreq.default_governor=performance
    # - preempt=full
storage:
  files:
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_ssid
      overwrite: true
      contents:
        inline: SEDwaveletssid
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_bssid
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletbssid
    # WiFi WPA Passphrase
    - path: /var/home/wavelet/wifi_pw
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletwifipassword
    # Flag to set security layer for production deployment - off by default!
    - path: /var/prod.security.disabled
      mode: 0644
      contents:
        inline: |
          Flag tells wavelet to utilize security layer on setup.
    # UltraGrid AppImage
    - path: /usr/local/bin/UltraGrid.AppImage
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/UltraGrid.AppImage
    # Sets hostname (set randomly after bootstrap process completes.
    # Any decoder can be promoted to another device by manually changing hostname
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: decX.wavelet.local
    # Skel .bashrc, profile customizations and Q.O.L improvements can go here
    - path: /etc/skel/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_bashrc.txt
    - path: /etc/skel/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_profile.txt
    # Wavelet user (b/c default doesn't use skel b/c we aren't using useradd -m)
    - path: /home/wavelet/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_bashrc.txt
    - path: /home/wavelet/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_profile.txt
    # PolKit entries for systemd services the wavelet user is allowed to manage
    # SystemD unit control
    - path: /etc/polkit-1/rules.d/1337-wavelet.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.systemd1.manage-units") {
              polkit.log("action=" + action)
              polkit.log("subject=" + subject)
              polkit.log("unit="+action.lookup("unit"))
              polkit.log("verb="+action.lookup("verb"))
              if (action.lookup("unit") == "systemd-resolved.service" ||
                  action.lookup("unit") == "dnsmasq.service" ||
                  action.lookup("unit") == "decoderhostname.service" ||
                  action.lookup("unit") == "etcd-member.service")
                  {
                  var verb = action.lookup("verb");
                  if (verb == "start" || verb == "stop" || verb == "restart" || verb == "enable" || verb == "disable") {
                      polkit.log("returning YES")
                      return polkit.Result.YES;
                  }
              }
          }
          polkit.log("returning NO") });
    # WiFI control
    - path: /etc/polkit-1/rules.d/1338-wavelet-wifi.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Allow wi-fi scans for all users]
          Identity=unix-user:*
          Action=org.freedesktop.NetworkManager.wifi.scan
          ResultAny=yes
          ResultInactive=yes
          ResultActive=yes
    # SystemD resolved
    - path: /etc/polkit-1/rules.d/51-systemd-resolved.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.resolve1") {
              if (subject.user == "wavelet") {
                  return polkit.Result.YES;
              }
          }
          polkit.log("returning NO") });
          });
    # Hostnamectl control
    - path: /etc/polkit-1/rules.d/49-wavelet-hostnamectl.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.hostname1.set-hostname") {
            if (subject.user == "wavelet") {
              return polkit.Result.YES;
                  }
                }
          polkit.log("returning NO") });
              });
    # generate dnf repository
    # looks at the server for cached packages before trying to download anything
    # saves about 800mb+ BW per install!
    # DNF is currently not properly working on rpm-ostree systems - have to revert to pulling everything down from web
    # https://github.com/rpm-software-management/dnf/issues/2108
#    - path: /etc/yum.repos.d/wavelet.repo
#      mode: 0644
#      overwrite: true
#      contents:
#        inline: |
#          [wavelet-repo]
#          name=Wavelet local server repository
#          baseurl=http://192.168.1.32:8080/repo_mirror/fedora/releases/$releasever/$basearch
#          enabled=1
#          gpgcheck=0
#          priority=10
    # Define system performance settings
    - path: /etc/sysctl.d/90-sysrq.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          kernel.sysrq = 0
    - path: /etc/sysctl.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # As per UG Team
          # Increase the read-buffer space allocatable
          net.ipv4.tcp_mem = 1000000 2000000 83886080
          net.ipv4.tcp_rmem = 8192 4194394 83886080
          net.ipv4.udp_mem = 8388608 12582912 83886080
          net.core.rmem_default = 83886080
          net.core.rmem_max = 83886080
          net.core.netdev_max_backlog = 2000
          net.ipv4.ip_unprivileged_port_start=53
          # Increase the write-buffer-space allocatable
          net.ipv4.tcp_wmem = 8192 4194394 83886080
          net.ipv4.udp_wmem = 8388608 12582912 83886080
          net.core.wmem_default = 83886080
          net.core.wmem_max = 83886080
          # intel gpu
          dev.i915.perf_stream_paranoid=0
          net.ipv4.ip_unprivileged_port_start=53
    # Prevent SSHD from generating older key types
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
    # Prevent SSHD from accepting anything other than modern ed25519 keytypes.
    - path: /etc/ssh/sshd_config.d/30-ed25519-only.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-ed25519 
    # We don't want rolling updates enabled via Zincati, as this is an offline appliance
    - path: /etc/zincati/config.d/90-disable-auto-updates.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Disable Zincati service auto-updates
          [updates]
          enabled = false
    # Define Udev rules for USB inputs, download appropriate scriptfiles
    - path: /etc/udev/rules.d/80-wavelet-encoder.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          ACTION=="add", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh"
          ACTION=="remove", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh removed"
    # Remainder files to be served from a previously configured Wavelet server.
    - path: /home/wavelet/wavelet-files.tar.xz
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/wavelet-files.tar.xz
    # Setup script for RPMFusion depends
    - path: /usr/local/bin/wavelet_installer_xf.sh
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/wavelet_installer_xf.sh
    # We don't want rolling updates enabled via Zincati, as this is an offline appliance
    - path: /etc/sudoers.d/hostnamectl
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Allow wavelet to set device hostname
          wavelet ALL=(ALL) NOPASSWD: /usr/bin/hostnamectl
# Systemd user units
    # systemD user unit for wavelet initialization
    # Called with other initializations when Sway is executed from;
    # autologin@tty1->.bashrc->sway->build_ug->run_ug->init
    - path: /home/wavelet/.config/systemd/user/wavelet_init.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
         [Unit]
         Description=Wavelet Controller Service
         After=network-online.target etcd-member.service
         Wants=network-online.target
         [Service]
         Type=simple
         ExecStart=/usr/local/bin/wavelet_init.sh
         [Install]
         WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Etcd watch reflectorflag service
    - path: /home/wavelet/.config/systemd/user/watch_reflectorreload.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Watches etcd for encoder restart
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDCTL_API=3
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 watch --prefix decoderip/ -w simple -- sh -c "/usr/local/bin/wavelet_client_poll.sh"
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Etcd watch encoderflag service
    - path: /home/wavelet/.config/systemd/user/watch_encoderflag.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Watches etcd for encoder restart
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDCTL_API=3
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 watch encoder_restart -w simple -- sh -c "/usr/local/bin/monitor_encoderflag.sh"
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # UltraGrid AppImage Launcher - this is a placeholder unit file, it's always overwritten by the script calling it.
    - path: /home/wavelet/.config/systemd/user/UltraGrid.AppImage.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=UltraGrid AppImage executable
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDENDPOINT=192.168.1.32:2379
          ExecStart=/usr/local/bin/UltraGrid.AppImage $(etcdctl --endpoints=${ETCDENDPOINT} get $(hostname)/UG_ARGS --print-value-only)
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Wavelet Encoder - runs the encoder.sh script which calls UltraGrid.AppImage and wavelet_textgen as necessary.
    - path: /home/wavelet/.config/systemd/user/wavelet_encoder.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Encoder service
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/wavelet_encoder.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # run_ug.sh determines system local functions and calls the AppImage launcher as appropriate.
    - path: /home/wavelet/.config/systemd/user/run_ug.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Wavelet Encoder/Decoder runner
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/run_ug.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # build_ug.sh determines system local functions and preconfigures the user systemd services appropriately for next boot
    - path: /home/wavelet/.config/systemd/user/build_ug.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Wavelet Initial Setup Service
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/build_ug.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
# Linger services for containers/systemd units
    - path: /var/lib/systemd/linger/wavelet
      mode: 0644
  directories:
    - path: /home/wavelet/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /etc/systemd/resolved.conf.d
      mode: 0644
    - path: /home/wavelet/.config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/dnsmasq
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd/user
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/registry
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/etcd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/buildah
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http/ignition
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /var/tftpboot
      mode: 0755
      user:
        name: dnsmasq
      group:
        name: dnsmasq
# user accounts, passwords and pubkeys
passwd:
  users:
      #ADD_USER_YAML_HERE
# Configure SYSTEM systemd units
systemd:
  units:
    # Decompress Wavelet files and install necessary pkgs.
    # Note, this creates all the /var/.complete files in script.
    - name: wavelet_installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Overlay packages, and generate second-boot systemd units
        ConditionFirstBoot=yes
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/bash -c "/usr/local/bin/wavelet_installer_xf.sh"
        ExecStartPost=-systemctl reboot
        [Install]
        WantedBy=multi-user.target
    # service to call decoderhostname randomizer (interactive auth required so this is a TEST to make it work from root!)
    - name: decoderhostname.service
      enabled: true
      contents: |
          [Unit]
          Description=Configures a four character hostname
          Wants=network-online.target
          After=network-online.target check_and_wait.target
          [Service]
          Type=oneshot
          ExecStart=-/usr/local/bin/decoderhostname.sh
          [Install]
          WantedBy=default.target
    # Reboot service
    - name: decoder-reboot.timer
      enabled: true
      contents: |
          [Unit]
          Description=Daily Reboot
          [Timer]
          OnCalendar=*-*-* 6:07:00
          [Install]
          WantedBy=timers.target
    # Reboot service timer
    - name: decoder-reboot.service
      contents: |
          [Unit]
          Description=Daily Reboot
          [Service]
          Type=simple
          ExecStart=/usr/bin/systemctl --force reboot
    # Mask docker entirely
    - name: docker.service
      mask: true
    # Mask irqbalance
    - name: irqbalance.service
      mask: true
    # Mask zincati entirely
    - name: zincati.service
      mask: true
    # Autologin dropin service
    # Causes a login loop until appropriate packages are installed
    # Service will start a sequence that will launch the Sway DM
    # Calls a number of user systemd units which provision Wavelet services.
    # check_and_wait.target
    - name: check_and_wait.target
      contents: |
       [Unit]
       ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
    # Actual unit
    - name: getty@tty1.service
      dropins:
        - name: autologin-core.conf
          contents: |
           [Unit]
           Wants=check_and_wait.target
           After=check_and_wait.target
           [Service]
           # Override Execstart in main unit
           ExecStart=
           # Add new Execstart with `-` prefix to ignore failure`
           ExecStart=-/usr/sbin/agetty --autologin wavelet --noclear %I $TERM