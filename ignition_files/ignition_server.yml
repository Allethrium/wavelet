# This file aims to provide a usable base CoreOS image that runs Server tasks.
# ignition:
# version: 3.0.0
---
variant: fcos
version: 1.5.0
kernel_arguments:
  should_exist:
    # - nosmt
    - preempt=full
    - threadirqs
    - mitigations=off
    - cpufreq.default_governor=performance
    - ip=192.168.1.32::192.168.1.1:255.255.255.0:svr.wavelet.local::on
    - nameserver=192.168.1.32
    - nameserver=192.168.1.1
    # - net.ifnames=0
    # - biosdevname=0
storage:
  files:
    # Setup Ignition Files
    # This is required to spinup the decoder ISO once the server boots.
    # the local file is relative to --files-dir cmdline option in Butane
    # This should be set from the wavelet_installer.sh initial config script
    - path: /home/wavelet/http/ignition/decoder.ign
      mode: 0644
      contents:
        local: decoder.ign
    # The customized decoder yml file which can be modified and regenerated
    - path: /home/wavelet/config/decoder_custom.yml
      mode: 0644
      contents:
        local: decoder_custom.yml
    - path: /var/isolationMode.enabled
      mode: 0644
      contents:
        inline: |
          enabled
    # Flag to set security layer for production deployment - off by default!
    - path: /var/prod.security.disabled
      mode: 0644
      contents:
        inline: |
          Flag tells wavelet to utilize security layer on setup.
    # Client device storage detection script
    - path: /home/wavelet/http/ignition/automated_coreos_deployment.sh
      mode: 0644
      contents:
        local: automated_coreos_deployment.sh
    # Client automated installer ignition
    - path: /home/wavelet/config/automated_installer.yml
      mode: 0644
      overwrite: true
      contents:
        local: automated_installer.yml
    # UltraGrid executable - track latest stable release where possible
    - path: /usr/local/bin/UltraGrid.AppImage
      mode: 0755
      overwrite: true
      contents:
        source: https://github.com/CESNET/UltraGrid/releases/download/v1.9.8/UltraGrid-1.9.8-x86_64.AppImage
    # Inhibit systemd suspend
    - path: /etc/systemd/logind.conf.d/inhibit-suspend.conf
      mode: 0644
      contents:
        inline: |
          [Login]
          HandleLidSwitch=ignore
    # Domain administrator password
    - path: /var/secrets/ipaadmpw.secure
      overwrite: true
      contents:
        inline: DomainAdminPasswordGoesHere
    # WiFi Name
    - path: /var/home/wavelet/config/wifi_ssid
      overwrite: true
      contents:
        inline: SEDwaveletssid
    # WiFi BSSID
    - path: /var/home/wavelet/config/wifi_bssid
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletbssid
    # WiFi WPA Passphrase
    - path: /var/home/wavelet/config/wifi_pw
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletwifipassword
    # The password Wavelet will use when attempting to configure network devices
    - path: /var/home/wavelet/config/networkdevice_userpass
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletnetworkdevicepassword
    # Devloper Mode
    - path: /var/developerMode.enabled
      overwrite: true
      contents:
        inline: DeveloperModeEnabled - will pull from working branch (default behavior)
    # Add a resolv.conf, self, gateway & quad9
    - path: /etc/resolv.conf
      overwrite: true
      contents:
        inline: |
          nameserver 192.168.1.32
          nameserver 192.168.1.1
          nameserver 9.9.9.9
    # Detect NetworkManager name and set as static script
    - path: /usr/local/bin/configure_ethernet.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/configure_ethernet.sh
    - path: /usr/local/bin/wavelet_check_dependencies.sh
      mode: 0755
      overwrite: true
      contents:
        inline: |
          #!/bin/bash
          # Check if both dependency systemd units have completed their tasks
          if [ -f "/var/pxe.complete" ] && [ -f "/var/wavelet_depends.complete" ]; then
          exit 0
          else
          exit 1
          fi
    # Set hostname
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: svr.wavelet.local
    # Skel .bashrc, profile customizations and Q.O.L improvements can go here
    - path: /etc/skel/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bashrc
    - path: /etc/skel/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bash_profile
    # Wavelet user (b/c default doesn't use skel b/c we aren't using useradd -m)
    - path: /home/wavelet/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bashrc
    - path: /home/wavelet/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bash_profile
    # Registries.conf to define local container registry
    # may change with prod. certs
    - path: /etc/containers/registries.conf.d/10-wavelet.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/containers/registries.conf.d/10-wavelet.conf
    # Disable PASST/Pasta
    - path: /etc/containers/containers.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/containers/containers.conf
    # Installer script to handle ostree overlay
    - path: /usr/local/bin/wavelet-installer_xf.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/usr/local/bin/wavelet_installer_xf.sh
    # UG Dependencies and Wavelet modules
    - path: /usr/local/bin/wavelet_install_ug_depends.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/usr/local/bin/wavelet_install_ug_depends.sh
    # PXE generator
    - path: /usr/local/bin/wavelet_pxe_grubconfig.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/usr/local/bin/wavelet_pxe_grubconfig.sh
    # Containerfile for Ostree overlay client
    - path: /home/wavelet/containerfiles/Containerfile.coreos.overlay.client
      mode: 0644
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/home/wavelet/containerfiles/Containerfile.coreos.overlay.client
    # Containerfile for Ostree overlay server
    - path: /home/wavelet/containerfiles/Containerfile.coreos.overlay.server
      mode: 0644
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/home/wavelet/containerfiles/Containerfile.coreos.overlay.server
    # Enable proxy for dnf.conf for all the good it may do us..
    - path: /etc/dnf/dnf.conf
      mode: 0664
      overwrite: true
      contents:
        inline: |
         [main]
         gpgcheck=True
         installonly_limit=3
         clean_requirements_on_remove=True
         best=False
         skip_if_unavailable=True
         fastestmirror=1
         max_parallel_downloads=2
    # Generate hosts file
    - path: /etc/hosts
      mode: 0664
      overwrite: true
      contents:
        inline: |
         127.0.0.1      localhost localhost.localdomain localhost4 localhost4.localdomain4
         ::1            localhost localhost.localdomain localhost6 localhost6.localdomain6
         192.168.1.32   svr.wavelet.local svr
    # Intel OneAPI RPM Repository
    - path: /etc/yum.repos.d/oneAPI.repo
      mode: 0664
      overwrite: true
      contents:
        inline: |
         [oneAPI]
         name=IntelÂ® oneAPI repository
         baseurl=https://yum.repos.intel.com/oneapi
         enabled=1
         gpgcheck=0
         repo_gpgcheck=0
         gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    # PolKit entries for systemd services the wavelet user is allowed to manage
    # SystemD unit control
    - path: /etc/polkit-1/rules.d/1337-wavelet.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
            if ((action.id == "org.freedesktop.systemd1.manage-units" &&
                 subject.user == "wavelet")) {
                  polkit.log("action=" + action)
                  polkit.log("subject=" + subject)
                  polkit.log("unit="+action.lookup("unit"))
                  polkit.log("verb="+action.lookup("verb"))
            if (action.lookup("unit") == "dnsmasq.service" ||
                action.lookup("unit") == "etcd-quadlet.service") {
                 var verb = action.lookup("verb");
                 if (verb == "start" || verb == "stop" || verb == "restart" || verb == "enable" || verb == "disable") {
                  polkit.log("returning YES")
                  return polkit.Result.YES;
                  }
                }
              }
          });
    # SystemD unit control
    - path: /etc/polkit-1/rules.d/9337-wavelet.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
            if ((action.id == "org.freedesktop.systemd1.manage-units" &&
                 subject.user == "wavelet-root")) {
                  polkit.log("action=" + action)
                  polkit.log("subject=" + subject)
                  polkit.log("unit="+action.lookup("unit"))
                  polkit.log("verb="+action.lookup("verb"))
            if (action.lookup("unit") == "dnsmasq.service" ||
                action.lookup("unit") == "etcd-quadlet.service") {
                 var verb = action.lookup("verb");
                 if (verb == "start" || verb == "stop" || verb == "restart" || verb == "enable" || verb == "disable") {
                  polkit.log("returning YES")
                  return polkit.Result.YES;
                  }
                }
              }
          });
    # Wifi control
    - path: /etc/polkit-1/rules.d/1338-wavelet-wifi.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
            if (( action.id == "org.freedesktop.NetworkManager.wifi.scan" ||
                  action.id == "org.freedesktop.NetworkManager.settings.modify.hostname" ||
                  action.id == "org.freedesktop.NetworkManager.settings.modify.own" ||
                  action.id == "org.freedesktop.NetworkManager.settings.modify.system" ||
                  action.id == "org.freedesktop.NetworkManager.network-control" ||
                  action.id == "org.freedesktop.NetworkManager.reload" ||
                  action.id == "org.freedesktop.NetworkManager.enable-disable-wifi" ||
                  action.id == "org.freedesktop.NetworkManager.enable-disable-network" ) &&
                  subject.user == "wavelet" ) {
                return polkit.Result.YES;
              }
          });
    # SystemD resolved
    - path: /etc/polkit-1/rules.d/51-systemd-resolved.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
            if ((action.id == "org.freedesktop.resolve1") &&
                 subject.user == "wavelet") {
                  return polkit.Result.YES;
                  }
          });
    # Reboot
    - path: /etc/polkit-1/rules.d/1336-systemd-reboot.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
            if ((action.id == "org.freedesktop.reboot" &&
                 subject.user == "wavelet")) {
                  return polkit.Result.YES;
                }
          });
    # Wavelet user does NOT have access to change hostname on the server
    # hence missing the polkit entry that's in the decoder ignition file!
    # disable systemd-resolved to free up port 53 and allow dnsmasq to launch
    - path: /etc/systemd/resolved.conf.d/10-dnsmasq.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Resolve]
          DNSStubListener=no
    # disable systemd-resolved to free up port 53 and allow dnsmasq to launch
    # This also has to be set here, because resolved appears to ignore the drop-ins.
    - path: /etc/systemd/resolved.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Resolve]
          DNSStubListener=no
    # Same will affect freeIPA.. so we want to create that file too.
    - path: /etc/systemd/resolved.conf.d/20-freeipa.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Resolve]
          DNSStubListener=no
          DNS={nameservers}
          Domains=~. {searchdomains}
    # dnsmasq.conf to define local DNS server environment
    - path: /etc/dnsmasq.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/dnsmasq.conf
    # etcd.conf file for nonsecure access
    - path: /etc/etcd/etcd.yaml.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/etcd.yaml.conf
    # etcd.conf file for nonsecure access
    - path: /etc/etcd/etcd.yaml.conf.secure
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/etcd.yaml.conf.secure
    # Automation to spin up and install dnsmasq as a SYSTEM service
    - path: /usr/local/bin/build_dnsmasq.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/build_dnsmasq.sh
    # Define system performance settings
    - path: /etc/sysctl.d/90-sysrq.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          kernel.sysrq = 0
    - path: /etc/sysctl.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # As per UG Team
          # Increase the read-buffer space allocatable
          net.ipv4.tcp_mem = 1000000 2000000 83886080
          net.ipv4.tcp_rmem = 8192 4194394 83886080
          net.ipv4.udp_mem = 8388608 12582912 83886080
          net.core.rmem_default = 83886080
          net.core.rmem_max = 83886080
          net.core.netdev_max_backlog = 2000
          net.ipv4.ip_unprivileged_port_start=53
          # Increase the write-buffer-space allocatable
          net.ipv4.tcp_wmem = 8192 4194394 83886080
          net.ipv4.udp_wmem = 8388608 12582912 83886080
          net.core.wmem_default = 83886080
          net.core.wmem_max = 83886080
          # intel gpu
          dev.i915.perf_stream_paranoid=0
    - path: /etc/modprobe.d/i915.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          options i915 enable_guc=2
    # Prevent SSHD from generating older key types
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
    # Prevent SSHD from accepting anything other than modern ed25519 keytypes.
    - path: /etc/ssh/sshd_config.d/30-ed25519-only.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-ed25519
    # We don't want rolling updates enabled via Zincati, as this is an offline appliance
    - path: /etc/zincati/config.d/90-disable-auto-updates.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Disable Zincati service auto-updates
          [updates]
          enabled = false
    # Setup script for RPMFusion depends
    - path: /usr/local/bin/wavelet_installer_xf.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/wavelet_installer_xf.sh
    # Define Udev rules for USB inputs, download appropriate scriptfiles
    - path: /etc/udev/rules.d/80-wavelet-encoder.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          ACTION=="add", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh"
          ACTION=="remove", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/removedevice.sh"
    # Sway config
    # Installation script to DL UG appimage and set systemd user units
    - path: /home/wavelet/.config/sway/config
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/sway/config
    # For SWAY - Styles.css is for the controller surface elsewhere..
    - path: /home/wavelet/.config/waybar/style.css
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/waybar/style.css
    - path: /home/wavelet/.config/waybar/time.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/waybar/time.sh
    # Firefox policies.json to precustomize the firefox UI - which it still ignores somehow.
    - path: /etc/firefox/policies/policies.json
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/firefox/policies/policies.json
# Systemd user units
    # systemD user unit for wavelet initialization
    - path: /home/wavelet/.config/systemd/user/wavelet_init.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
         [Unit]
         Description=Wavelet Controller Service
         After=network-online.target etcd-quadlet.service
         Wants=network-online.target
         [Service]
         Type=simple
         ExecStart=/usr/bin/sh -c "/usr/local/bin/wavelet_init.sh"
         [Install]
         WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Wavelet Encoder - runs the encoder.sh script which calls UltraGrid.AppImage and wavelet_textgen as necessary.
    - path: /home/wavelet/.config/systemd/user/wavelet_encoder.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Encoder service
          After=network-online.target etcd-quadlet.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/wavelet_encoder.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Reflector script service - populates all reflector data, sets flags, calls Reflector proper.
    - path: /home/wavelet/.config/systemd/user/wavelet_reflector.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=UltraGrid AppImage executable
          After=network-online.target etcd-quadlet.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/wavelet_reflector.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # run_ug.sh determines system local functions and calls the AppImage launcher as appropriate.
    - path: /home/wavelet/.config/systemd/user/run_ug.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Encoder/Decoder runner
          After=network-online.target etcd-quadlet.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/run_ug.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # build_ug.sh determines system local functions
    # Preconfigures the user systemd services appropriately
    - path: /home/wavelet/.config/systemd/user/build_ug.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Initial Setup Service
          After=network-online.target etcd-quadlet.service sway-session.target
          Wants=network-online.target sway-session.target
          [Service]
          Type=oneshot
          ExecStartPre=/usr/local/bin/wavelet_check_dependencies.sh
          ExecStart=/usr/local/bin/build_ug.sh
          [Install]
          WantedBy=sway-session.target
      user:
        name: wavelet
      group:
        name: wavelet
    # .htaccess dynamic index listing
    - path: /home/wavelet/http/.htaccess
      mode: 0664
      overwrite: true
      contents:
        inline: |
         Options +Indexes
         <Limit GET POST>
         order deny,allow
         deny from all
         allow from 192.168.1.0/24
         </Limit>
         IndexIgnore tabele_remote.php
         IndexIgnore demo.txt
         IndexIgnore functions.php
         IndexIgnore config.php
      user:
        name: wavelet
      group:
        name: wavelet
    # wavelet-root owns provision_request
    - path: /home/wavelet-root/.config/systemd/user/wavelet_provision.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Provision key watcher (UID 9337)
          After=network-online.target etcd-quadlet.service sway-session.target
          Wants=network-online.target sway-session.target
          [Service]
          Type=simple
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 --user PROV:wavelet_provision watch /PROV/REQUEST -w simple -- /usr/bin/bash -c "/usr/local/bin/wavelet_provision.sh"
          [Install]
          WantedBy=multi-user.target
      user:
        name: wavelet-root
      group:
        name: wavelet-root
    # Linger services for containers/systemd units which the wavelet user is required to access
    - path: /var/lib/systemd/linger/wavelet
      mode: 0644
    - path: /var/lib/systemd/linger/wavelet-root
      mode: 0644
  directories:
    - path: /home/wavelet/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /etc/systemd/resolved.conf.d
      mode: 0644
    - path: /home/wavelet/.config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd/user
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/registry
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/etcd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.ssh/secrets
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet-root/.ssh/secrets
      mode: 0755
      user:
        name: wavelet-root
      group:
        name: wavelet-root
    - path: /home/wavelet-root/config
      mode: 0755
      user:
        name: wavelet-root
      group:
        name: wavelet-root
    - path: /home/wavelet/http
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http-php/html
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    # Needed for podman ostree bug https://github.com/containers/podman/issues/23515
    - path: /home/wavelet/.local/share/containers/storage/volumes
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http-php/nginx
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http/ignition
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /var/lib/tftpboot
      mode: 0755
      user:
        name: root
      group:
        name: root
# user accounts, passwords and pubkeys (populated from installer)
passwd:
  users:
      #ADD_USER_YAML_HERE
# Configure SYSTEM systemd units
systemd:
  units:
    # Decompress Wavelet files and install necessary pkgs.
    # Note, this creates all the /var/.complete files in script.
    - name: wavelet_installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Install packages, generate second-boot systemd rootful units
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=multi-user.target network-online.target
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/bash -c "/usr/local/bin/wavelet_installer_xf.sh"
        ExecStartPost=-systemctl reboot
        [Install]
        WantedBy=multi-user.target
    # Container registry to host and serve containers to local clients
    # N.B needs dns resolution
    - name: registry.service
      enabled: true
      contents: |
        [Unit]
        Description=Run local container registry
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=forking
        Restart=on-failure
        RemainAfterExit=yes
        ExecStartPre=-/bin/podman kill registry
        ExecStartPre=-/bin/podman rm registry
        ExecStartPre=mkdir -p /var/lib/registry
        ExecStart=/bin/podman run --privileged -d --name registry -p 5000:5000 -v /home/wavelet/registry/:/var/lib/registry/:z --restart=always registry:2
        ExecStop=/bin/podman stop registry
        [Install]
        WantedBy=multi-user.target
# Disable resolved, enable dnsmasq
    - name: switch-resolved-to-dnsmasq.service
      enabled: true
      contents: |
        [Unit]
        Description=Switch DNS resolution to DNSmasq
        After=network-online.target
        Wants=network-online.target
        ConditionPathExists=/var/isolationMode.enabled
        [Service]
        Type=oneshot
        ExecStartPre=systemctl stop systemd-resolved.service
        ExecStart=systemctl enable dnsmasq.service --now
        ExecStartPost=systemctl start systemd-resolved.service
        [Install]
        WantedBy=multi-user.target
    # Reboot service
    - name: server-reboot.timer
      enabled: true
      contents: |
          [Unit]
          Description=Daily Reboot
          [Timer]
          OnCalendar=*-*-* 06:00:00
          [Install]
          WantedBy=timers.target
    # Reboot service timer
    - name: server-reboot.service
      contents: |
          [Unit]
          Description=Daily Reboot
          [Service]
          Type=simple
          ExecStart=/usr/bin/systemctl --force reboot
    # Mask docker entirely
    - name: docker.service
      mask: true
    # Mask irqbalance
    - name: irqbalance.service
      mask: true
    # Unmask dnsmasq
    - name: dnsmasq.service
      mask: false
    # Mask NetworkManager-wait-online.service
    # - name: NetworkManager-wait-online.service
    #   mask: true
    # Autologin dropin service
    # Causes a login loop until appropriate packages are installed
    # Service will start a sequence that will launch the Sway DM
    - name: check_and_wait.target
      contents: |
       [Unit]
       ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
    # Actual unit
    - name: getty@tty1.service
      dropins:
        - name: autologin-core.conf
          contents: |
           [Unit]
           Wants=check_and_wait.target
           After=check_and_wait.target
           [Service]
           # Override Execstart in main unit
           ExecStart=
           # Add new Execstart with `-` prefix to ignore failure
           ExecStart=-/usr/sbin/agetty --autologin wavelet --noclear %I $TERM