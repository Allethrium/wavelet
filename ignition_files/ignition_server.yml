# This file aims to provide a usable base CoreOS image that runs Server tasks.
# ignition:
# version: 3.0.0
---
variant: fcos
version: 1.5.0
kernel_arguments:
  should_exist:
    # - nosmt
    - preempt=full
    - threadirqs
    - mitigations=off
    - cpufreq.default_governor=performance
    - ip=192.168.1.32::192.168.1.1:255.255.255.0:svr.wavelet.local::on
    - nameserver=192.168.1.1
    - nameserver=9.9.9.9
    # - net.ifnames=0
    # - biosdevname=0
# Configure static networking. LAB IP is always 192.168.1.32
# GW always 192.168.1.1
# The DNSMasq.conf file is set for same values
# Changing these will break the install process for everything
# A bootstrap script may be written to preconfig this.
# UltraGrid AppImage
storage:
  files:
    # Inhibit systemd suspend
    - path: /etc/systemd/logind.conf.d/inhibit-suspend.conf
      mode: 0644
      contents:
        inline: |
          [Login]
          HandleLidSwitch=ignore
    - path: /usr/local/bin/UltraGrid.AppImage
      mode: 0755
      overwrite: true
      contents:
        source: https://github.com/CESNET/UltraGrid/releases/download/v1.9.5/UltraGrid-1.9.5-x86_64.AppImage
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_ssid
      overwrite: true
      contents:
        inline: SEDwaveletssid
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_bssid
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletbssid
    # WiFi WPA Passphrase
    - path: /var/home/wavelet/wifi_pw
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletwifipassword
    # Devloper Mode
    - path: /var/tmp/DEV_OFF
      overwrite: true
      contents:
        inline: DeveloperModeEnableSwitch
    # Detect NetworkManager name and set as static script
    - path: /usr/local/bin/configure_ethernet.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/configure_ethernet.sh
    # Set hostname
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: svr.wavelet.local
    # Skel .bashrc, profile customizations and Q.O.L improvements can go here
    - path: /etc/skel/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bashrc
    - path: /etc/skel/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bash_profile
    # Wavelet user (b/c default doesn't use skel b/c we aren't using useradd -m)
    - path: /home/wavelet/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bashrc
    - path: /home/wavelet/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/skel/.bash_profile
    # Registries.conf to define local container registry
    # may change with prod. certs
    - path: /etc/containers/registries.conf.d/10-wavelet.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/containers/registries.conf.d/10-wavelet.conf
    # Disable PASST/Pasta
    - path: /etc/containers/containers.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/containers/containers.conf
    # Installer script to handle ostree overlay and git clone
    - path: /usr/local/bin/wavelet-installer_xf.sh
      mode: 0644
      overwrite: true
      contents:
        source: https://github.com/Allethrium/wavelet/raw/master/webfiles/root/usr/local/bin/wavelet_installer_xf.sh
    # Enable proxy for dnf.conf for all the good it may do us..
    - path: /etc/dnf/dnf.conf
      mode: 0664
      overwrite: true
      contents:
        inline: |
         [main]
         gpgcheck=True
         installonly_limit=3
         clean_requirements_on_remove=True
         best=False
         skip_if_unavailable=True
         fastestmirror=1
         max_parallel_downloads=2
    # Ensure ipa server is enabled in hosts
    - path: /etc/hosts
      mode: 0664
      overwrite: true
      contents:
        inline: |
         192.168.1.32   ipa.wavelet.local ipa
    # Intel OneAPI RPM Repository
    - path: /etc/yum.repos.d/oneAPI.repo
      mode: 0664
      overwrite: true
      contents:
        inline: |
         [oneAPI]
         name=IntelÂ® oneAPI repository
         baseurl=https://yum.repos.intel.com/oneapi
         enabled=1
         gpgcheck=0
         repo_gpgcheck=0
         gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    # PolKit entries for systemd services the wavelet user is allowed to manage
    # SystemD unit control
    - path: /etc/polkit-1/rules.d/1337-wavelet.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.systemd1.manage-units") {
              polkit.log("action=" + action)
              polkit.log("subject=" + subject)
              polkit.log("unit="+action.lookup("unit"))
              polkit.log("verb="+action.lookup("verb"))
              if (action.lookup("unit") == "systemd-resolved.service" ||
                  action.lookup("unit") == "dnsmasq.service") {
                  var verb = action.lookup("verb");
                  if (verb == "start" || verb == "stop" || verb == "restart" || verb == "enable" || verb == "disable") {
                      polkit.log("returning YES")
                      return polkit.Result.YES;
                  }
              }
          }
          polkit.log("returning NO") });
    # Wifi control
    - path: /etc/polkit-1/rules.d/1338-wavelet-wifi.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Allow wi-fi scans for all users]
          Identity=unix-user:*
          Action=org.freedesktop.NetworkManager.wifi.scan
          ResultAny=yes
          ResultInactive=yes
          ResultActive=yes
    # Wavelet user does NOT have access to change hostname on the server
    # hence missing the polkit entry that's in the decoder ignition file!
    # disable systemd-resolved to free up port 53 and allow dnsmasq to launch
    - path: /etc/systemd/resolved.conf.d/10-dnsmasq.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Resolve]
          DNSStubListener=no
    # dnsmasq.conf to define local DNS server environment
    - path: /etc/dnsmasq.conf
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/dnsmasq.conf
    # Automation to spin up and install dnsmasq as a SYSTEM service
    - path: /usr/local/bin/build_dnsmasq.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/build_dnsmasq.sh
    # Define system performance settings
    - path: /etc/sysctl.d/90-sysrq.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          kernel.sysrq = 0
    - path: /etc/sysctl.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # As per UG Team
          # Increase the read-buffer space allocatable
          net.ipv4.tcp_mem = 1000000 2000000 83886080
          net.ipv4.tcp_rmem = 8192 4194394 83886080
          net.ipv4.udp_mem = 8388608 12582912 83886080
          net.core.rmem_default = 83886080
          net.core.rmem_max = 83886080
          net.core.netdev_max_backlog = 2000
          net.ipv4.ip_unprivileged_port_start=53
          # Increase the write-buffer-space allocatable
          net.ipv4.tcp_wmem = 8192 4194394 83886080
          net.ipv4.udp_wmem = 8388608 12582912 83886080
          net.core.wmem_default = 83886080
          net.core.wmem_max = 83886080
          # intel gpu
          dev.i915.perf_stream_paranoid=0
    - path: /etc/modprobe.d/i915.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          options i915 enable_guc=2
    # Prevent SSHD from generating older key types
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
    # Prevent SSHD from accepting anything other than modern ed25519 keytypes.
    - path: /etc/ssh/sshd_config.d/30-ed25519-only.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-ed25519
    # We don't want rolling updates enabled via Zincati, as this is an offline appliance
    - path: /etc/zincati/config.d/90-disable-auto-updates.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Disable Zincati service auto-updates
          [updates]
          enabled = false
    # Setup script for RPMFusion depends
    - path: /usr/local/bin/wavelet_installer_xf.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/usr/local/bin/wavelet_installer_xf.sh
    # Define Udev rules for USB inputs, download appropriate scriptfiles
    - path: /etc/udev/rules.d/80-wavelet-encoder.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          ACTION=="add", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh"
          ACTION=="remove", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/removedevice.sh"
    # Sway config
    # Installation script to DL UG appimage and set systemd user units
    - path: /home/wavelet/.config/sway/config
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/sway/config
    # For SWAY - Styles.css is for the controller surface elsewhere..
    - path: /home/wavelet/.config/waybar/style.css
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/waybar/style.css
    - path: /home/wavelet/.config/waybar/time.sh
      mode: 0755
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/home/wavelet/.config/waybar/time.sh
    # Firefox policies.json to precustomize the firefox UI
    - path: /etc/firefox/policies.json
      mode: 0644
      overwrite: true
      contents:
        source: https://raw.githubusercontent.com/Allethrium/wavelet/master/webfiles/root/etc/firefox/policies.json
# Systemd user units
    # systemD user unit for wavelet initialization
    # Called with other initializations when Sway is executed from;
    # autologin@tty1->.bashrc->sway->build_ug->run_ug->init
    - path: /home/wavelet/.config/systemd/user/wavelet_init.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
         [Unit]
         Description=Wavelet Controller Service
         After=network-online.target etcd-member.service
         Wants=network-online.target
         [Service]
         Type=simple
         ExecStart=/usr/bin/sh -c "/usr/local/bin/wavelet_init.sh"
         [Install]
         WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Etcd watch controller input channel service
    - path: /home/wavelet/.config/systemd/user/wavelet_controller.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Controller - etcd input triggers orchestration
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDCTL_API=3
          RemainAfterExit=yes
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 watch input_update -w simple -- sh -c "/usr/local/bin/wavelet_controller.sh"
          Restart=on-failure
          RestartSec=1
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Etcd watch reflectorflag service
    - path: /home/wavelet/.config/systemd/user/watch_reflectorreload.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Watches etcd for reflector restart
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDCTL_API=3
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 watch --prefix /decoderip/ -w simple -- sh -c "/usr/local/bin/wavelet_client_poll.sh"
          Restart=on-failure
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Etcd watch encoderflag service
    - path: /home/wavelet/.config/systemd/user/watch_encoderflag.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Watches etcd for encoder restart
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDCTL_API=3
          ExecStart=etcdctl --endpoints=192.168.1.32:2379 watch /"%H"/encoder_restart -w simple -- sh -c "/usr/local/bin/monitor_encoderflag.sh"
          Restart=on-failure
          RestartSec=1
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # UltraGrid AppImage Launcher - this is a placeholder unit file, it's always overwritten by the script calling it.
    - path: /home/wavelet/.config/systemd/user/UltraGrid.AppImage.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=UltraGrid AppImage executable
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDENDPOINT=192.168.1.32:2379
          ExecStart=/usr/local/bin/UltraGrid.AppImage $(etcdctl --endpoints=${ETCDENDPOINT} get $(hostname)/UG_ARGS --print-value-only)
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Wavelet Encoder - runs the encoder.sh script which calls UltraGrid.AppImage and wavelet_textgen as necessary.
    - path: /home/wavelet/.config/systemd/user/wavelet_encoder.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Encoder service
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/wavelet_encoder.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # Reflector script service - populates all reflector data, sets flags, calls Reflector proper.
    - path: /home/wavelet/.config/systemd/user/wavelet_reflector.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=UltraGrid AppImage executable
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/wavelet_reflector.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # UltraGrid reflector - placeholder, it's overwritten in the reflector script, like the AppImage unit file!
    - path: /home/wavelet/.config/systemd/user/UltraGrid.Reflector.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=UltraGrid AppImage executable
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Environment=ETCDENDPOINT=192.168.1.32:2379
          ExecStart=/usr/local/bin/UltraGrid.AppImage $(etcdctl --endpoints=${ETCDENDPOINT} get REFLECTOR_ARGS --print-value-only)
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # run_ug.sh determines system local functions and calls the AppImage launcher as appropriate.
    - path: /home/wavelet/.config/systemd/user/run_ug.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Encoder/Decoder runner
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          ExecStart=/usr/local/bin/run_ug.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # build_ug.sh determines system local functions and preconfigures the user systemd services appropriately for next boot
    - path: /home/wavelet/.config/systemd/user/build_ug.service
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Wavelet Initial Setup Service
          After=network-online.target etcd-member.service
          Wants=network-online.target
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/build_ug.sh
          [Install]
          WantedBy=default.target
      user:
        name: wavelet
      group:
        name: wavelet
    # .htaccess dynamic index listing
    - path: /home/wavelet/http/.htaccess
      mode: 0664
      overwrite: true
      contents:
        inline: |
         Options +Indexes
         <Limit GET POST>
         order deny,allow
         deny from all
         allow from 192.168.1.0/24
         </Limit>
         IndexIgnore tabele_remote.php
         IndexIgnore demo.txt
         IndexIgnore functions.php
         IndexIgnore config.php
      user:
        name: wavelet
      group:
        name: wavelet
    # Linger services for containers/systemd units which the wavelet user is required to access
    - path: /var/lib/systemd/linger/wavelet
      mode: 0644
  directories:
    - path: /home/wavelet/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /etc/systemd/resolved.conf.d
      mode: 0644
    - path: /home/wavelet/.config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/dnsmasq
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd/user
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/registry
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/etcd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/buildah
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http-php/html
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http-php/nginx
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/http/ignition
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /var/tftpboot
      mode: 0755
      user:
        name: dnsmasq
      group:
        name: dnsmasq
# user accounts, passwords and pubkeys
passwd:
  users:
      # Root account
    - name: wavelet-root
      uid: 9337
      groups:
        - wheel
        - sudo
      password_hash: waveletrootpassword
      home_dir: /home/wavelet-root
      # User account
    - name: wavelet
      uid: 1337
      # N.B ignition can't yet create groups properly as of 1.5
      # This might need to be done via postinstall.sh
      groups:
        # - wavelet
        # - audio
        # - video
        # - render
        # - rdma
        # - kvm
      password_hash: waveletuserpassword
      ssh_authorized_keys:
        - PUBKEYGOESHERE
      home_dir: /home/wavelet
# Configure SYSTEM systemd units
systemd:
  units:
    # Decompress Wavelet files and install necessary pkgs.
    # Note, this creates all the /var/.complete files in script.
    - name: wavelet_installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Decompress Wavelet files
        ConditionFirstBoot=yes
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/bash -c "/usr/local/bin/wavelet_installer_xf.sh"
        ExecStartPost=-touch /var/extract.target
        [Install]
        WantedBy=multi-user.target
    # Install necessary base files
    - name: configure_svr_ip.service
      enabled: true
      contents: |
        [Unit]
        Description=Configures desired server IP address
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=-/usr/local/bin/configure_ethernet.sh
        [Install]
        WantedBy=multi-user.target
    # Cockpit for remote management
    - name: cockpit.enable.service
      enabled: true
      contents: |
        [Unit]
        Description=Enable Cockpit WS
        After=network-online.target
        Wants=network-online.target
        ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
        [Service]
        Type=oneshot
        ExecStartPre=podman pull quay.io/cockpit/ws
        ExecStartPre=podman container runlabel INSTALL quay.io/cockpit/ws:latest
        ExecStart=systemctl enable cockpit.service --now
        [Install]
        WantedBy=multi-user.target
    # Generate wavelet Cgroup
    - name: wavelet.cgroup.service
      enabled: true
      contents: |
        [Unit]
        Description=Generate cgroup for wavelet user
        ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c `/usr/local/bin/generate_cgroup.sh
        [Install]
        WantedBy=multi-user.target
    # Container registry to host and serve containers to local clients
    - name: registry.service
      enabled: true
      contents: |
        [Unit]
        Description=Run local container registry
        After=network-online.target
        Wants=network-online.target
        ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
        [Service]
        Type=forking
        Restart=on-failure
        RemainAfterExit=yes
        ExecStartPre=-/bin/podman kill registry
        ExecStartPre=-/bin/podman rm registry
        ExecStart=/bin/podman run --privileged -d --name registry -p 5000:5000 -v /home/wavelet/registry/:/var/lib/registry/:z --restart=always registry:2
        ExecStop=/bin/podman stop registry
        [Install]
        WantedBy=multi-user.target
# Disable resolved, enable dnsmasq
    - name: switch-resolved-to-dnsmasq.service
      enabled: true
      contents: |
        [Unit]
        Description=Switch DNS resolution to DNSmasq
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStartPre=systemctl stop systemd-resolved.service
        ExecStart=systemctl enable dnsmasq.service --now
        ExecStartPost=systemctl start systemd-resolved.service
        [Install]
        WantedBy=multi-user.target
    # Reboot service
    - name: server-reboot.timer
      enabled: true
      contents: |
          [Unit]
          Description=Daily Reboot
          [Timer]
          OnCalendar=*-*-* 06:00:00
          [Install]
          WantedBy=timers.target
    # Reboot service timer
    - name: server-reboot.service
      contents: |
          [Unit]
          Description=Daily Reboot
          [Service]
          Type=simple
          ExecStart=/usr/bin/systemctl --force reboot
    # Mask docker entirely
    - name: docker.service
      mask: true
    # Mask irqbalance
    - name: irqbalance.service
      mask: true
    # Unmask dnsmasq
    - name: dnsmasq.service
      mask: false
    # Mask NetworkManager-wait-online.service
    # - name: NetworkManager-wait-online.service
    #   mask: true
    # Autologin dropin service
    # Causes a login loop until appropriate packages are installed
    # Service will start a sequence that will launch the Sway DM
    - name: check_and_wait.target
      contents: |
       [Unit]
       ConditionPathExists=/var/rpm-ostree-overlay.rpmfusion.pkgs.complete
    # Actual unit
    - name: getty@tty1.service
      dropins:
        - name: autologin-core.conf
          contents: |
           [Unit]
           Wants=check_and_wait.target
           After=check_and_wait.target
           [Service]
           # Override Execstart in main unit
           ExecStart=
           # Add new Execstart with `-` prefix to ignore failure`
           ExecStart=-/usr/sbin/agetty --autologin wavelet --noclear %I $TERM
