# Depreciated - don't use this anymore, it uses the decoder ignition script and autodetects itself based off hostname now.

variant: fcos
version: 1.5.0
kernel_arguments: 
  should_exist: 
    - nosmt 
    - threadirqs 
    - mitigations=off 
storage:
  files:
# Sets hostname (PRECONFIGURED by initial setup script in actual deployment, or you can edit it here and generate an ignition file with butane..)
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents: 
        inline: enc0.mis.357m.60c.wavelet.local
# run_ug.sh script that launches UltraGrid and handles tasks such as client registration and setting keys in etcd
    - path: /home/wavelet/run_ug.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://www.andymelville.net/wavelet/run_ug.sh
# Skel .bashrc, profile customizations and Q.O.L improvements can go here
    - path: /etc/skel/.bashrc
      mode: 0644
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/skel_bashrc.txt
    - path: /etc/skel/.bash_profile
      mode: 0644
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/skel_profile.txt
# Wavelet user (b/c default doesn't use skel b/c we aren't using useradd -m)
    - path: /home/wavelet/.bashrc
      mode: 0644
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/skel_bashrc.txt
    - path: /home/wavelet/.bash_profile
      mode: 0644
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/skel_profile.txt
# Registries.conf to define local container registry - this is always the same data, may change with prod. certs
    - path: /etc/containers/registries.conf
      mode: 0644
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/registries.conf
# Define system performance settings
    - path: /etc/sysctl.d/90-sysrq.conf
      mode: 0644
      contents:
        inline: |
          kernel.sysrq = 0
    - path: /etc/sysctl.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          net.core.wmem_max = 8388608
          net.core.rmem_max = 72990720   # for uncompressed 8K
          net.ipv4.ip_unprivileged_port_start=53
# Define Udev rules for USB inputs, download appropriate scriptfiles
    - path: /etc/udev/rules.d/80-wavelet-encoder.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          ACTION=="add", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/home/wavelet/udev_call.sh"
    - path: /home/wavelet/udev_call.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/udev_call.sh
    - path: /home/wavelet/detectv4l.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://andymelville.net/wavelet/detectv4l.sh
# Enable password auth so you can get into the server via Cockpit
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
# run_ug.sh script that launches UltraGrid and handles tasks such as client registration and setting keys in etcd
    - path: /home/wavelet/run_ug.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://www.andymelville.net/wavelet/run_ug.sh
# wavelet_reflector.sh to run the reflector
    - path: /home/wavelet/wavelet_reflector.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://www.andymelville.net/wavelet/wavelet_reflector.sh
# monitor_encoderflag.sh to monitor for encoder restarts
    - path: /home/wavelet/wavelet_client_poll.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://www.andymelville.net/wavelet/wavelet_client_poll.sh
# monitor_encoderflag.sh to monitor for encoder restarts
    - path: /home/wavelet/monitor_encoderflag.sh
      mode: 0755
      overwrite: true
      contents: 
        source: https://www.andymelville.net/wavelet/monitor_encoderflag.sh
# TODO Define PipeWire/Wireplumber settings for BT Audio capture to livestream
# Linger services for User services configure in the USER section below
    - path: /var/lib/systemd/linger/wavelet
      mode: 0644
  directories:
    - path: /home/wavelet/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd/user
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/registry
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
passwd: 
  users:
    - name: wavelet-root
      uid: 9337
      groups: 
        - wheel
      password_hash: waveletrootpassword
      home_dir: /home/wavelet-root
    - name: wavelet
      uid: 1337
# N.B ignition can't yet create groups properly so this might need to be done via postinstall.sh
      groups: 
        #- wavelet
        #- audio
        #- video
        #- render
        #- rdma
        #- kvm
      password_hash: waveletuserpassword
      home_dir: /home/wavelet
      ssh_authorized_keys:
          - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBmo+nVPHtnqrKp7YubD5fT9TnLlbQp22SBxKaGco/sZ wavelet@wavelet.local
systemd:
  units:
  - name: install-overlayed-rpms.service
    enabled: true
    contents: |
        [Unit]
        Description=Install Overlay Packages
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=rpm-ostree install sway rofi-wayland sway-systemd waybar foot vim powerline powerline-fonts vim-powerline NetworkManager-wifi iw wireless-regdb wpa_supplicant cockpit-networkmanager cockpit-system cockpit-ostree cockpit-podman rdma GraphicsMagick wget --reboot
        [Install]
        WantedBy=multi-user.target
# Enable RPMFusion-OStree (necessary for Intel Video Acceleration)
  - name: install-rpmfusion-ostree.service
    enabled: true
    contents: |
        [Unit]
        Description=Install RPMFusion Ostree
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=rpm-ostree install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm --reboot
        [Install]
        WantedBy=multi-user.target
# Mask docker entirely
  - name: docker.service
    mask: true
# Autologin
  - name: serial-getty@ttyS0.service
    dropins:
      - name: autologin-wavelet.conf
        contents: |
          [Service]
          # Override Execstart in main unit
          ExecStart=
          # Add new Execstart with `-` prefix to ignore failure`
          ExecStart=-/usr/sbin/agetty --autologin wavelet --noclear %I $TERM
# Cockpit for remote management
  - name: cockpit.enable.service
    enabled: true
    contents: |
        [Unit]
        Description=Enable Cockpit WS
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStartPre=setsebool -P container_manage_cgroup on
        ExecStartPre=podman pull quay.io/cockpit/ws
        ExecStartPre=podman container runlabel INSTALL quay.io/cockpit/ws
        ExecStart=systemctl enable cockpit.service --now
        [Install]
        WantedBy=multi-user.target# Timer service for encoder flag monitor
  - name: encoderflag_timer.service
    enabled: true
    contents: |
        [Unit]
        Description=Timer for encoder flag polling
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Timer]
        OnBootSec=30sec
        AccuracySec=100us
        OnUnitActiveSec=5s
        Unit=monitor_encoderflag.service
        [Install]
        WantedBy=multi-user.target
# Polls etcd for encoder flag data
  - name: monitor_encoderflag.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs monitor_encoderflag.sh to poll for restart
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStart=/home/wavelet/monitor_encoderflag.sh
        [Install]
        WantedBy=multi-user.target
# Reflector service
  - name: wavelet_reflector.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs the reflector service
        After=network-online.target
        Wants=network-online.target
        [Service]
        ExecStart=/home/wavelet/wavelet_reflector.sh
        [Install]
        WantedBy=multi-user.target
# Timer service for client host monitor
  - name: wavelet_monitor_timer.service
    enabled: true
    contents: |
        [Unit]
        Description=Timer for encoder flag polling
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Timer]
        OnBootSec=30sec
        AccuracySec=100us
        OnUnitActiveSec=5s
        Unit=wavelet_monitor.service
        [Install]
        WantedBy=multi-user.target
# Polls etcd for alive hosts
  - name: wavelet_monitor.service
    enabled: true
    contents: |
        [Unit]
        Description=Polls etcd and pings hosts to keepalive
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStart=/home/wavelet/wavelet_client_poll.sh
        [Install]
        WantedBy=multi-user.target
# UltraGrid launcher
  - name: run_ug.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs UltraGrid type detection and launcher
        After=network-online.target
        Wants=network-online.target
        [Service]
        ExecStart=/home/wavelet/run_ug.sh
        [Install]
        WantedBy=multi-user.target
# Enable sway systemd service, customize Sway for std. tiles + launch journalctl + other views as appropriate.. or find an otherwise robust way of getting UltraGrid up and running on reload.
