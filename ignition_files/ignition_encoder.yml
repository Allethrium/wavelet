# Updated to keep in line with current standard settings.
variant: fcos
version: 1.5.0
kernel_arguments: 
  should_exist: 
    - nosmt
    - threadirqs
    - mitigations=off
    - cpufreq.default_governor=performance
    # - preempt=full 
storage:
  files:
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_ssid
      overwrite: true
      contents:
        inline: SEDwaveletssid
    # WiFi WiFi Name
    - path: /var/home/wavelet/wifi_bssid
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletbssid
    # WiFi WPA Passphrase
    - path: /var/home/wavelet/wifi_pw
      mode: 0600
      overwrite: true
      contents:
        inline: SEDwaveletwifipassword
    # UltraGrid AppImage
    - path: /usr/local/bin/UltraGrid.AppImage
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/UltraGrid.AppImage
    # Sets hostname (set during build phase after bootstrap)
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: encX.wavelet.local
    # Skel .bashrc, profile customizations and Q.O.L improvements can go here
    - path: /etc/skel/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_bashrc.txt
    - path: /etc/skel/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_profile.txt
    # Wavelet user (b/c default doesn't use skel b/c we aren't using useradd -m)
    - path: /home/wavelet/.bashrc
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_bashrc.txt
    - path: /home/wavelet/.bash_profile
      mode: 0644
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/skel_profile.txt
    # PolKit entries for systemd services the wavelet user is allowed to manage
    - path: /etc/polkit-1/rules.d/1337-wavelet.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.systemd1.manage-units") {
              polkit.log("action=" + action)
              polkit.log("subject=" + subject)
              polkit.log("unit="+action.lookup("unit"))
              polkit.log("verb="+action.lookup("verb"))
              if (action.lookup("unit") == "systemd-resolved.service" ||
                  action.lookup("unit") == "dnsmasq.service" ||
                  action.lookup("unit") == "decoderhostname.service" ||
                  action.lookup("unit") == "etcd-member.service")
                  {
                  var verb = action.lookup("verb");
                  if (verb == "start" || verb == "stop" || verb == "restart" || verb == "enable" || verb == "disable") {
                      polkit.log("returning YES")
                      return polkit.Result.YES;
                  }
              }
          }
          polkit.log("returning NO") });
# PolKit entries for systemd services the wavelet user is allowed to manage
    - path: /etc/polkit-1/rules.d/1338-wavelet-wifi.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [Allow wi-fi scans for all users]
          Identity=unix-user:*
          Action=org.freedesktop.NetworkManager.wifi.scan
          ResultAny=yes
          ResultInactive=yes
          ResultActive=yes
# Allow wavelet user access to hostnamectl
    - path: /etc/polkit-1/rules.d/49-wavelet-hostnamectl.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          polkit.addRule(function(action, subject) {
          if (action.id == "org.freedesktop.hostname1.set-hostname") {
            if (subject.user == "wavelet") {
              return polkit.Result.YES;
                  }
                }
          polkit.log("returning NO") });
              });
    # generate dnf repository
    # looks at the server for cached packages before trying to download anything
    # saves about 800mb+ BW per install!
    - path: /etc/yum.repos.d/wavelet.repo
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [wavelet-repo]
          name=Wavelet local server repository
          baseurl=http://192.168.1.32:8080/repo_mirror/fedora/releases/$releasever/$basearch
          enabled=1
          gpgcheck=0
          priority=10
    # Define system performance settings
    - path: /etc/sysctl.d/90-sysrq.conf
      mode: 0644
      contents:
        inline: |
          kernel.sysrq = 0
    - path: /etc/sysctl.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # As per UG Team
          # Increase the read-buffer space allocatable
          net.ipv4.tcp_mem = 1000000 2000000 83886080
          net.ipv4.tcp_rmem = 8192 4194394 83886080
          net.ipv4.udp_mem = 8388608 12582912 83886080
          net.core.rmem_default = 83886080
          net.core.rmem_max = 83886080
          net.core.netdev_max_backlog = 2000
          net.ipv4.ip_unprivileged_port_start=53
          # Increase the write-buffer-space allocatable
          net.ipv4.tcp_wmem = 8192 4194394 83886080
          net.ipv4.udp_wmem = 8388608 12582912 83886080
          net.core.wmem_default = 83886080
          net.core.wmem_max = 83886080
          # intel gpu
          dev.i915.perf_stream_paranoid=0
          net.ipv4.ip_unprivileged_port_start=53
    # Prevent SSHD from generating older key types
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
    # Prevent SSHD from accepting anything other than modern ed25519 keytypes.
    - path: /etc/ssh/sshd_config.d/30-ed25519-only.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-ed25519 
    # We don't want rolling updates enabled via Zincati, as this is an offline appliance
    - path: /etc/zincati/config.d/90-disable-auto-updates.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # Disable Zincati service auto-updates
          [updates]
          enabled = false
    # Define Udev rules for USB inputs, download appropriate scriptfiles
    - path: /etc/udev/rules.d/80-wavelet-encoder.rules
      mode: 0644
      overwrite: true
      contents:
        inline: |
          ACTION=="add", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh"
          ACTION=="remove", ENV{ID_BUS}=="usb", SUBSYSTEM=="usb", RUN+="/usr/local/bin/udev_call.sh removed"
    # Remainder files to be served from a previously configured Wavelet server.
    - path: /home/wavelet/wavelet-files.tar.xz
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/wavelet-files.tar.xz
    # Setup script for RPMFusion depends
    - path: /usr/local/bin/wavelet_installer_xf.sh
      mode: 0755
      overwrite: true
      contents:
        source: http://192.168.1.32:8080/ignition/wavelet_installer_xf.sh
# TODO Define PipeWire/Wireplumber settings for BT Audio capture to livestream
# Linger services for User services configure in the USER section below
    - path: /var/lib/systemd/linger/wavelet
      mode: 0644
  directories:
    - path: /home/wavelet/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/.config/systemd/user
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
    - path: /home/wavelet/registry
      mode: 0755
      user:
        name: wavelet
      group:
        name: wavelet
passwd: 
  users:
    - name: wavelet-root
      uid: 9337
      groups: 
        - wheel
      password_hash: waveletrootpassword
      home_dir: /home/wavelet-root
    - name: wavelet
      uid: 1337
# N.B ignition can't yet create groups properly so this might need to be done via postinstall.sh
      groups: 
        #- wavelet
        #- audio
        #- video
        #- render
        #- rdma
        #- kvm
      password_hash: waveletuserpassword
      home_dir: /home/wavelet
      ssh_authorized_keys:
        - PUBKEYGOESHERE
systemd:
  units:
    - name: install-overlayed-rpms.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Overlay Packages
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=install-overlayed-rpms-rpmfusion-repo.service
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=rpm-ostree install -A wget fontawesome-fonts wl-clipboard nnn \
        mako sway bemenu rofi-wayland lxsession sway-systemd waybar \
        foot vim powerline powerline-fonts vim-powerline \
        NetworkManager-wifi iw wireless-regdb wpa_supplicant \
        cockpit-bridge cockpit-networkmanager cockpit-system cockpit-ostree cockpit-podman \
        buildah rdma git iwlwifi-dvm-firmware.noarch iwlwifi-mvm-firmware.noarch etcd \
        dnf yum-utils createrepo \
        libsrtp python3-pip srt srt-libs libv4l v4l-utils libva-v4l2-request pipewire-v4l2 \
        ImageMagick oneapi-level-zero oneVPL oneVPL-intel-gpu intel-opencl intel-level-zero \
        intel-media-driver intel-mediasdk mesa-dri-drivers mesa-vulkan-drivers \
        mesa-vdpau-drivers libdrm mesa-libEGL mesa-libgbm mesa-libGL \
        mesa-libxatracker libva libva-utils intel-gmmlib intel-ocloc
        ExecStartPost=touch /var/rpm-ostree-overlay.complete
        [Install]
        WantedBy=multi-user.target
# Enable RPMFusion-OStree (necessary for Intel Video Acceleration)
  - name: install-rpmfusion-ostree.service
    enabled: true
    contents: |
        [Unit]
        Description=Install RPMFusion Ostree
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=rpm-ostree install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm --reboot
        [Install]
        WantedBy=multi-user.target
# Mask docker entirely
  - name: docker.service
    mask: true
# Autologin
  - name: serial-getty@ttyS0.service
    dropins:
      - name: autologin-wavelet.conf
        contents: |
          [Service]
          # Override Execstart in main unit
          ExecStart=
          # Add new Execstart with `-` prefix to ignore failure`
          ExecStart=-/usr/sbin/agetty --autologin wavelet --noclear %I $TERM
# Cockpit for remote management
  - name: cockpit.enable.service
    enabled: true
    contents: |
        [Unit]
        Description=Enable Cockpit WS
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStartPre=setsebool -P container_manage_cgroup on
        ExecStartPre=podman pull quay.io/cockpit/ws
        ExecStartPre=podman container runlabel INSTALL quay.io/cockpit/ws
        ExecStart=systemctl enable cockpit.service --now
        [Install]
        WantedBy=multi-user.target# Timer service for encoder flag monitor
  - name: encoderflag_timer.service
    enabled: true
    contents: |
        [Unit]
        Description=Timer for encoder flag polling
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Timer]
        OnBootSec=30sec
        AccuracySec=100us
        OnUnitActiveSec=5s
        Unit=monitor_encoderflag.service
        [Install]
        WantedBy=multi-user.target
# Polls etcd for encoder flag data
  - name: monitor_encoderflag.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs monitor_encoderflag.sh to poll for restart
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStart=/home/wavelet/monitor_encoderflag.sh
        [Install]
        WantedBy=multi-user.target
# Reflector service
  - name: wavelet_reflector.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs the reflector service
        After=network-online.target
        Wants=network-online.target
        [Service]
        ExecStart=/home/wavelet/wavelet_reflector.sh
        [Install]
        WantedBy=multi-user.target
# Timer service for client host monitor
  - name: wavelet_monitor_timer.service
    enabled: true
    contents: |
        [Unit]
        Description=Timer for encoder flag polling
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Timer]
        OnBootSec=30sec
        AccuracySec=100us
        OnUnitActiveSec=5s
        Unit=wavelet_monitor.service
        [Install]
        WantedBy=multi-user.target
# Polls etcd for alive hosts
  - name: wavelet_monitor.service
    enabled: true
    contents: |
        [Unit]
        Description=Polls etcd and pings hosts to keepalive
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        ExecStart=/home/wavelet/wavelet_client_poll.sh
        [Install]
        WantedBy=multi-user.target
# UltraGrid launcher
  - name: run_ug.service
    enabled: true
    contents: |
        [Unit]
        Description=Runs UltraGrid type detection and launcher
        After=network-online.target
        Wants=network-online.target
        [Service]
        ExecStart=/home/wavelet/run_ug.sh
        [Install]
        WantedBy=multi-user.target
# Enable sway systemd service, customize Sway for std. tiles + launch journalctl + other views as appropriate.. or find an otherwise robust way of getting UltraGrid up and running on reload.
