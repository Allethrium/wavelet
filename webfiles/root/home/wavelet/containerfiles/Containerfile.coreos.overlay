#	This file primarily references the following sources;
#	https://github.com/coreos/layering-examples/blob/main/build-zfs-module/Containerfile
#	https://github.com/coreos/layering-examples/blob/main/replace-kernel/Containerfile
#	https://github.com/coreos/layering-examples
#	https://coreos.github.io/rpm-ostree/layering/
#	https://travier.github.io/rpm-ostree/cliwrap/

# This containerfile aims to build all dependencies for Wavelet in a container
# To be applied as an ostree rebase
# We use the fedora testing branch because this is the only functional way I could find to get a proper bootable image
# The kernel download/install correctly calls dracut to regenerate initramfs.  Manual attempts at this failed (from coreos layering examples)

FROM quay.io/fedora/fedora-coreos:stable
ARG DKMS_KERNEL_VERSION
	# Define, download, and install host kernel version from Koji build system
RUN KERNEL_VERSION="$(rpm -qa kernel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}')" && echo "\n\nContainer Kernel Version is: ${KERNEL_VERSION}\n\n" && \
	echo -e "\nHost Kernel: ${DKMS_KERNEL_VERSION}\n" && echo -e "\nContainer Kernel: ${KERNEL_VERSION}\n" && if [[ ${DKMS_KERNEL_VERSION} = ${KERNEL_VERSION} ]] ; then echo -e '\nKernel matches!\n' && \
	rpm-ostree install -y kernel-devel-matched; else echo -e '\nKernels do not match, downloading matching host kernel from Koji..\n' && \
	rpm-ostree install -y -A koji && \
	koji download-build --rpm --arch=x86_64 kernel-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-core-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-devel-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-modules-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-modules-core-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-modules-extra-${DKMS_KERNEL_VERSION} && \
	koji download-build --rpm --arch=x86_64 kernel-devel-matched-${DKMS_KERNEL_VERSION}; fi
RUN	rpm-ostree cliwrap install-to-root / && rpm-ostree override replace \
	kernel-${DKMS_KERNEL_VERSION}.rpm \
	kernel-core-${DKMS_KERNEL_VERSION}.rpm \
	kernel-devel-${DKMS_KERNEL_VERSION}.rpm \
	kernel-devel-matched-${DKMS_KERNEL_VERSION}.rpm \
	kernel-modules-${DKMS_KERNEL_VERSION}.rpm \
	kernel-modules-core-${DKMS_KERNEL_VERSION}.rpm \
	kernel-modules-extra-${DKMS_KERNEL_VERSION}.rpm && \
	rm -rf *.rpm && \
	ostree container commit || true
	# We remove nfs-utils-coreos as this makes the freeipa client unavailable for install.
RUN rpm-ostree override remove nfs-utils-coreos --install nfs-utils
RUN	rpm-ostree install -y -A \
	https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
    https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm && \
	rpm-ostree install -y -A \
	wget fontawesome-fonts wl-clipboard nnn mako sway bemenu rofi-wayland lxsession sway-systemd waybar \
	foot vim powerline powerline-fonts vim-powerline perl NetworkManager-wifi iw wireless-regdb wpa_supplicant \
	buildah rdma butane freeipa-client kea \
	iwlwifi-dvm-firmware.noarch iwlwifi-mvm-firmware.noarch etcd sha libdrm python3-pip \
	libv4l v4l-utils  pipewire-v4l2 ImageMagick \
	mesa-dri-drivers mesa-vulkan-drivers mesa-vdpau-drivers libdrm mesa-libEGL mesa-libgbm mesa-libGL \
	mesa-libxatracker alsa-lib pipewire-alsa alsa-firmware alsa-plugins-speex bluez-tools netcat busybox inotify-tools \
	make cmake coreutils binutils binutils-gold libtool gcc gcc-c++ glibc libgcc libstdc++ zlib-ng-compat glibc-devel \
	cpio dkms usbutils tuned realtime-setup realtime-tests rtkit jo openssl openssl-devel \
	autoconf automake libtirpc-devel libblkid-devel libaio-devel libattr-devel elfutils-libelf-devel ncompress libcurl-devel \
	bzip2-devel libffi-devel zlib-devel libuuid-devel libudev-devel chkconfig akmods kmod kmod-devel kmodtool mokutil \
	intel-media-driver intel-gpu-tools intel-compute-runtime oneVPL-intel-gpu intel-media-driver intel-gmmlib \
    intel-level-zero oneapi-level-zero libvpl intel-mediasdk libva libva-utils libva-v4l2-request libva-vdpau-driver intel-ocloc \
    ocl-icd opencl-headers mpv libsrtp mesa-dri-drivers intel-opencl libvdpau-va-gl mesa-vdpau-drivers libvdpau libvdpau-devel \
    libva-intel-driver ffmpeg ffmpeg-libs libheif-freeworld fastfetch htop mesa-libOpenCL python3-pip srt srt-libs firefox \
    ffmpeg vlc mplayer libndi-sdk ndi-sdk ndi-sdk-devel ndi-sdk-documentation pipewire-utils \
    rkhunter clamav clamav-freshclam && \
    # don't need to peform manually linking now
	#ln -s /usr/bin/ld.bfd /etc/alternatives/ld && \
	#ln -s /etc/alternatives/ld /usr/bin/ld && \
	ostree container commit
	# Module key signing needs much more understanding on my part to get working correctly..
RUN mkdir -p /usr/lib/blackmagic && mkdir -p /var/lib/blackmagic && \
	mokdir="/usr/lib/blackmagic" && \
	openssl rand -writerand /usr/lib/blackmagic/.rnd && ln -s /usr/lib/blackmagic/.rnd /var/lib/blackmagic/.rnd && \
	openssl req -config "/mount/openssl.cnf" -subj "/CN=MOK Signing Key/C=USA/ST=New York/L=New York/O=Global Security/OU=ALLETHRIUM/CN=wavelet.local"-new -x509 -newkey rsa:2048 -nodes -days 36500 -outform DER -keyout "/usr/lib/blackmagic/MOK.priv" -out "/usr/lib/blackmagic/MOK.der" && \
	ln -s /usr/lib/blackmagic/MOK.priv /var/lib/blackmagic/MOK.priv && \
	ln -s /usr/lib/blackmagic/MOK.der /var/lib/blackmagic/MOK.der && \
	curl -L https://www.andymelville.net/wavelet/desktopvideo-14.2.1a1.x86_64.rpm -f --retry 5 > "desktopvideo.rpm" && \
	rpm-ostree install -y -A desktopvideo.rpm && \
	ostree container commit