#May need some udev rule to make sure it always maps to the right input device
#!/bin/bash

# Define event paramaters
event_blank="1"
event_seal="2"
event_witness="3"
event_evidence="4"
event_evidence_pip="5"
event_hybrid="6"
event_record="7"

# this reads in the log from the keylogger service, and tails only the last input byte
# #variable=$(tail -c 1 $file)
#echo $variable
file=/home/labuser/Downloads/logkeys/test.log
#trap " " INT
#tail -f -c 1 $file | variable=(echo)
#trap - INT
#echo 5
#while tail -f -c 1 $file | read line
#tail -f -c 1 $file | grep --line-buffered ".*" | echo |
#
#
#
#
#
#new attempt..
#
mkfifo $PIPE
tail -f -c 1 $file | sed -u 's/[^0-9]*//g' <  $PIPE
while IFS= read -r LINE
do
	echo ${LINE}
	case $LINE in
    ($event_blank) ./wavelet_kill_all.sh && ./wavelet_blankscreen.sh && echo "Option One, Blank activated" ;; # display black screen
    ($event_seal) ./wavelet_kill_all.sh && ./wavelet_seal.sh && echo "Option Two, Seal activated" ;; # TBD - just display a static image (dickbutt.jpg)
    ($event_witness) ./wavelet_kill_all.sh && ./wavelet_witness.sh && echo "Option Three, Witness activated";; # feed from Webcam
    ($event_evidence) ./wavelet_kill_all.sh && ./wavelet_evidence.sh && echo "Option Four, Document Camera activated";; # document camera basically
    ($event_evidence_pip) ./wavelet_kill_all.sh && ./wavelet_evidence_pip.sh && echo "Option Five, Doc with Witness PIP activated";; # display picture-in picture combo of Evidence, Witness in smaller frame
    ($event_hybrid) ./wavelet_kill_all.sh && ./wavelet_hybrid.sh && echo "Option Six, Hybrid Mode activated";; # Switch to a screen capture pulling a Teams meeting window
    ($event_record) ./wavelet_record.sh ;; # does not kill any streams, instead copies stream and appends to a labeled MKV file
	esac
done < $PIPE


#) & wait_pid=$!
#tail --pid={$wait_pid} -F /home/labuser/Downloads/logkeys/test.log | sed "1,10d" | grep > "Option" ${RELEASE}
#
#
#
#
#
#
#
#
#mylog() {
#	echo >>/home/labuser/Downloads/logkeys/test.log "$@"
#}
#
#while read line; do
#    case $event in
#        NEW )
#            ip2int $target intTarget
#            ((count[intTarget]++))
#        ...
#
#    esac
#done < <(tail -f /home/labuser/Downloads/logkeys/test.log | sed -une '
#  s/^.*New incom.*from ip \([0-9.]\+\) .*$/NEW \1/p;
#  s/^.*Auth.*ip \([0-9.]\+\) failed./FAIL \1/p;
#  ...
#')

